#!/usr/bin/env node

'use strict';

var wip = require('../');
var exec = require('child_process').exec;
var chalk = require('chalk');

// has a config command
if(process.argv[2]){
  var arg2 = process.argv[2].toLowerCase();
  switch(arg2){
    case 'silently':
      console.log(wip.box(chalk.blue(wip.emojify('ðŸ”‡  ') +
        'I\'ll wip silently from now on :(' +
        wip.emojify('  ðŸ”‡ '))));
      wip.conf.set('sound', false);
      break;
    case 'loudly':
      console.log(wip.box(chalk.green(wip.emojify('ðŸ”Š  ') +
        'Turn those speakers up, we\'re WIPin\' with sound!' +
        wip.emojify('  ðŸ”Š '))));
      wip.conf.set('sound', true);
      break;
    case 'with':
    case 'without':
      if(typeof process.argv[3] === 'string'){
        switch(process.argv[3].toLowerCase()){
          case 'commitizen':
          case 'cz':
            if(arg2 === 'with'){
              console.log(wip.box(chalk.green(
                wip.emojify('âš¡   ') +
                'GIT POWER LEVEL OVER 9000.' + wip.emojify(' âš¡') +
                '\n\n  naenae will now use commitizen.  '
              )));
              wip.conf.set('commitizen', true);
            } else {
              console.log(wip.box(chalk.yellow(
                'Alright, naenae will use the default commit message editor.' +
                wip.emojify('  ðŸ’© '))));
              wip.conf.set('commitizen', false);
            }
            break;
          case 'emoji':
          case 'e':
            if(arg2 === 'with'){
              console.log(wip.box(chalk.yellow(
                'You\'re WIPin\' with emoji now  ðŸ˜„ '
              )));
              wip.conf.set('emoji', true);
            } else {
              console.log(wip.box(chalk.yellow(
                'Alright, wip will not use emoji.'
              )));
              wip.conf.set('emoji', false);
            }
            break;
          default:
            wip.help();
        }
      } else {
          wip.help();
        }
      break;
    case 'done':
    case 'commit':
    case 'finish':
    case 'ok':
      console.log(wip.box(
        'Hmmm... I\'m not sure if that\'s possible. Were you trying to' +
        wip.emojify(' ðŸ‘‹  ') +
        '$ naenae?'
      ));
      break;
    default:
      wip.help();
  }
  process.exit();
}

// confirm we're inside a repo (and Git is installed)
exec('git rev-parse --is-inside-work-tree',
  function(error, stdout){
    if(stdout.trim() !== 'true'){
      wip.sound('stanky-leg', 'Stanky Leg (STANK!)');
      var help = '\n\nTo start a new one, make sure Git is installed and run:\n\n  $ git init';
      console.log(wip.box(chalk.red('Couldn\'t find a Git repo.') + help, 'double'));
      process.exit();
    }

    // add all files and commit
    exec('git add -A && git commit --no-verify -m "WIP"',
      function(error, stdout){
        if (error !== null) {
          console.log(stdout);
          console.log('Did you mean to $ naenae?\n');
        } else {
          wip.recursiveCountWIPsInBatchesOf(100, function(numberOfWIPs){
            console.log('\n\n' + stdout);
            wip.sound('watch-me-wip', 'Now watch me WIP');
            var heading;
            if(wip.conf.get('leftHand')){
              heading = wip.emojify('  ðŸ‘Š âœ…  ');
              wip.conf.set('leftHand', false);
            } else {
              heading = wip.emojify('   âœ… ðŸ‘Š  ');
              wip.conf.set('leftHand', true);
            }
            console.log(chalk.green(wip.box(heading + wip.emojify('\n\n') + 'WIP ' + numberOfWIPs + ' saved.')));
          });
        }
    });
});
